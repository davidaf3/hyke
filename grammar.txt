program     ::= statement EOF | statement EOL program
statement   ::= funcsig | funcbody

funcsig     ::= SYMBOL "::" funcsigtype
funcsigtype ::= functypes "->" functype | functype

functypes   ::= functype | functype functypes
functype    ::= type | type "=" arg

type        ::= "[" type "]" | tupletype | SYMBOL
tupletype   ::= "(" type "," ")" | "(" type "," tupletypes ")"
tupletypes  ::= type | type "," tupletypes

funcbody    ::= SYMBOL params "=" expr

params      ::= param params | Î»
param       ::= SYMBOL | pattern
pattern     ::= literal | "(" expr ")"

expr        ::= literal | SYMBOL | funccall | "(" expr ")" | expr BINOP expr

funccall    ::= SYMBOL args
args        ::= arg | arg args
arg         ::= literal | SYMBOL | "(" expr ")"

literal     ::= NATLIT | BOOLLIT | listlit | tuplelit
listlit     ::= "[" listitems "]" | "[" "]"
listitems   ::= expr | expr "," listitems
tuplelit    ::= "(" expr "," ")" | "(" expr "," listitems ")"
